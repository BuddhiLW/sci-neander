#+AUTHOR: BuddhiLW
#+STARTUP: latexpreview
#+PROPERTY: header-args:js :tangle ./src/sicmutils_org/sicmutils1.clj :mkdirp yes

* Preamble Structures
** project.clj
#+begin_src clojure :tangle project.clj
(defproject sicmutils-org "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  :dependencies [[org.clojure/clojure "1.10.1"]
                 [sicmutils/sicmutils "0.18.0"]
                 [uncomplicate/neanderthal "0.41.0"]
                 [org.bytedeco/mkl-platform-redist "2021.1-1.5.5"]]
  :exclusions [[org.jcuda/jcuda-natives :classifier "apple-x86_64"]
               [org.jcuda/jcublas-natives :classifier "apple-x86_64"]]
  :main ^:skip-aot sicmutils-org.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all
                       ;; :jvm-opts ["-Dclojure.compiler.direct-linking=true"]
                       :jvm-opts ^:replace ["--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED"]}})
#+end_src

#+RESULTS:
: class clojure.lang.Compiler$CompilerException

* Sicmutils
** Name Space (ns)
#+begin_src clojure :tangle src/sicmutils_org/sicmutils1.clj :mkdirp
  (ns sicmutils-org.sicmutils1
    (:require [sicmutils.env :as env]))
(env/bootstrap-repl!)
  #+end_src

  #+RESULTS:

** simple render examples
#+begin_src clojure :tangle src/sicmutils_org/sicmutils1.clj 
  (def render (comp ->infix simplify))

  (square (sin (+ 'a 3)))
  ;;=> (expt (sin (+ a 3)) 2)

  (render (square (sin (+ 'a 3))))
  ;;=> "sin²(a + 3)"
#+end_src

#+RESULTS:
| class clojure.lang.Compiler$CompilerException |
| class clojure.lang.Compiler$CompilerException |
| class clojure.lang.Compiler$CompilerException |

** simple tex-render example
#+begin_src clojure :tangle src/sicmutils_org/sicmutils1.clj  
  (def render-tex (comp ->TeX simplify))
  (render-tex
   (simplify ((D cube) 'x)))
#+end_src

#+RESULTS:
| #'sicmutils-org.sicmutils1/render-tex |
| "3\\,{x}^{2}"                         |

** Lagrangiana de um pêndulo
#+begin_src clojure :tangle src/sicmutils_org/sicmutils1.clj
  (defn L-central-polar [m U]
    (fn [[_ [r] [rdot thetadot]]]
      (- (* 1/2 m
            (+ (square rdot)
               (square (* r thetadot))))
         (U r))))
#+end_src

#+RESULTS:
: #'sicmutils-org.core/L-central-polar

#+begin_src clojure :tangle src/sicmutils_org/sicmutils1.clj
  (let [potential-fn (literal-function 'U)
        L     (L-central-polar 'm potential-fn)
        state (up (literal-function 'r)
                  (literal-function 'theta))]
    (render-tex
     (((Lagrange-equations L) state) 't)))
  ;;=> "down(- m r(t) (Dθ(t))² + m D²r(t) + DU(r(t)), m (r(t))² D²θ(t) + 2 m r(t) Dr(t) Dθ(t))"
#+end_src

\begin{bmatrix}\displaystyle{- m\,r\left(t\right)\,{\left(D\theta\left(t\right)\right)}^{2} + m\,{D}^{2}r\left(t\right) + DU\left(r\left(t\right)\right)}& \\
\displaystyle{m\,
{\left(r\left(t\right)\right)}^{2}\,{D}^{2}\theta\left(t\right) + 2\,m\,r\left(t\right)\,D\theta\left(t\right)\,Dr\left(t\right)}\end{bmatrix}

